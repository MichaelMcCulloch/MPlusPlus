module SkelExpr where

-- Haskell module generated by the BNF converter
import qualified AST as A
import AbsExpr
import ErrM

transExpr :: Expr -> A.Expr
transExpr x = case x of
  EAdd expr term -> A.Add (transExpr expr, transTerm term)
  ETerm term -> transTerm term
transTerm :: Term -> A.Expr
transTerm x = case x of
  TMul term factor -> A.Mul (transTerm term, transFactor factor)
  TFact factor -> transFactor factor
transFactor :: Factor -> A.Expr
transFactor x = case x of
  Num integer -> A.Num integer
