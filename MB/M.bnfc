comment "%" ;
comment "/*" "*/" ;

token CID '#'('_' | digit | letter )* ;
token BVAL ({"false"} | {"true"});

P.  Prog ::= Block ;

Prog. Block ::= [Declaration] ProgramBody ;

VarDef.     Declaration ::= VarDeclaration ;
FunDef.     Declaration ::= FunDeclaration ;
DataDef.    Declaration ::= DataDeclaration ;

VarDeclaration.     VarDeclaration ::= "var" [VarSpec] ":" Type ;

VarSpec.    VarSpec ::= Ident [ArrayDimension] ;

ArrDim.   ArrayDimension ::= "[" Expr "]" ;

Tint.     Type ::= "int" ;
Treal.    Type ::= "real" ;
Tbool.    Type ::= "bool" ;
Tchar.    Type ::= "char" ;
Tuser.    Type ::= Ident ;

FunctionDec.       FunDeclaration ::= "fun" Ident ParamList ":" Type "{" FunBlock "}" ;

FunctionBlock.       FunBlock ::= [Declaration] FunBody ;

ParameterList.       ParamList ::= "(" [BasicDeclaration] ")" ;

BasicDeclaration.     BasicDeclaration ::= Ident [BasicArrayDimension] ":" Type ;
BArrDim. BasicArrayDimension ::= "[" "]" ;

DataDeclaration.   DataDeclaration ::= "data" Ident "=" [ConsDecl] ;

CTypeList.   ConsDecl ::= CID "of" [Type] ;
CSimple.       ConsDecl ::= CID ;

ProgBodyA. ProgramBody ::= "begin" [ProgStmt] "end" ;
ProgBodyB.  ProgramBody ::= [ProgStmt] ;

FunBodyA. FunBody ::= "begin" [ProgStmt] "return" Expr ";" "end" ;
FunBodyB.    FunBody ::= [ProgStmt] "return" Expr ";" ;

PIf.      ProgStmt ::= "if" Expr "then" ProgStmt "else" ProgStmt ;
PWhile.   ProgStmt ::= "while" Expr "do" ProgStmt ;
PRead.    ProgStmt ::= "read" Location ;
PLocation.ProgStmt ::= Location ":=" Expr ;
PPrint.   ProgStmt ::= "print" Expr ;
PBlock.   ProgStmt ::= "{" Block "}" ;
PExpr.    ProgStmt ::= "case" Expr "of" "{" [Case] "}" ;

Location.      Location ::= Ident [ArrayDimension] ;

Case.     Case ::= CID VarList "=>" ProgStmt ;

VLList.   VarList ::= "(" [Ident] ")" ;
VLEnd.    VarList ::= ;
BOr.      Expr ::= Expr "||" BintTerm ;
BTerm.     Expr ::= BintTerm ;

BAnd.     BintTerm ::= BintTerm "&&" BintFactor ;
BFactor.    BintTerm ::= BintFactor ;

BNot.     BintFactor ::= "not" BintFactor ;
BCompare.    BintFactor ::= IntExpr CompareOp IntExpr ;
BExpr.     BintFactor ::= IntExpr ;

CompEQ.       CompareOp ::= "=" ;
CompLT.       CompareOp ::= "<" ;
CompGT.       CompareOp ::= ">" ;
CompLEQ.      CompareOp ::= "=<" ;
CompGEQ.      CompareOp ::= ">=" ;

IntAdd.     IntExpr ::= IntExpr Addop IntTerm ;
IntTerm.    IntExpr ::= IntTerm ;

Add.     Addop ::= "+" ;
Sub.    Addop ::= "-" ;

IntMul.     IntTerm ::= IntTerm Mulop IntFactor ;
IntFactor.    IntTerm ::= IntFactor ;

Mult.      Mulop ::= "*" ;
Divide.      Mulop ::= "/" ;

Expression.   IntFactor ::= "(" Expr ")" ;
Size.   IntFactor ::= "size" "(" Ident [BasicArrayDimension] ")" ;
Float.  IntFactor ::= "float" "(" Expr ")" ;
Floor.  IntFactor ::= "floor" "(" Expr ")" ;
Ceil.   IntFactor ::= "ceil" "(" Expr ")" ;
ID.     IntFactor ::= Ident ModifierList ;
Data.    IntFactor ::= CID ConsArgumentList ;
Integer.    IntFactor ::= Integer ;
Real.   IntFactor ::= Double ;
Boolean.   IntFactor ::= BVAL ;
Character.   IntFactor ::= Char ;
Negate.    IntFactor ::= "-" IntFactor ;

FunctionCall.    ModifierList ::= FunArgumentList ;
ArrayAccess.    ModifierList ::= [ArrayDimension] ;

Args.  FunArgumentList ::= "(" [Expr] ")" ;

DataArguments.  ConsArgumentList ::= FunArgumentList ;
NoArguments.   ConsArgumentList ::= ;

separator VarSpec "," ;
separator ArrayDimension "" ;
separator BasicDeclaration "," ;
separator BasicArrayDimension "" ;
separator nonempty ConsDecl "|" ;
separator nonempty Type "*" ;
separator nonempty Case "|" ;
separator nonempty Ident "," ;
separator Expr "," ;

terminator Declaration ";" ;
terminator ProgStmt ";" ;
