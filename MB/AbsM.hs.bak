

module AbsM where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
newtype CID = CID String deriving (Eq, Ord, Show, Read)
newtype BVAL = BVAL String deriving (Eq, Ord, Show, Read)
data Prog = P Block
  deriving (Eq, Ord, Show, Read)

data Block = Prog [Declaration] ProgramBody
  deriving (Eq, Ord, Show, Read)

data Declaration
    = VarDef VarDeclaration
    | FunDef FunDeclaration
    | DataDef DataDeclaration
  deriving (Eq, Ord, Show, Read)

data VarDeclaration = VarDeclaration [VarSpec] Type
  deriving (Eq, Ord, Show, Read)

data VarSpec = VarSpec Ident [ArrayDimension]
  deriving (Eq, Ord, Show, Read)

data ArrayDimension = ArrDim Expr
  deriving (Eq, Ord, Show, Read)

data Type = Tint | Treal | Tbool | Tchar | Tuser Ident
  deriving (Eq, Ord, Show, Read)

data FunDeclaration = FunctionDec Ident ParamList Type FunBlock
  deriving (Eq, Ord, Show, Read)

data FunBlock = FunctionBlock [Declaration] FunBody
  deriving (Eq, Ord, Show, Read)

data ParamList = ParameterList [BasicDeclaration]
  deriving (Eq, Ord, Show, Read)

data BasicDeclaration
    = BasicDeclaration Ident [BasicArrayDimension] Type
  deriving (Eq, Ord, Show, Read)

data BasicArrayDimension = BArrDim
  deriving (Eq, Ord, Show, Read)

data DataDeclaration = DataDeclaration Ident ConsDeclarations
  deriving (Eq, Ord, Show, Read)

data ConsDeclarations = ConsDeclarations ConsDecl MoreConsDecl
  deriving (Eq, Ord, Show, Read)

data MoreConsDecl = MCDList ConsDecl MoreConsDecl | MCDEnd
  deriving (Eq, Ord, Show, Read)

data ConsDecl = CTypeList CID TypeList | CSimple CID
  deriving (Eq, Ord, Show, Read)

data TypeList = TList Type MoreType
  deriving (Eq, Ord, Show, Read)

data MoreType = MTList Type MoreType | MTEnd
  deriving (Eq, Ord, Show, Read)

data ProgramBody = ProgBodyA ProgStmts | ProgBodyB ProgStmts
  deriving (Eq, Ord, Show, Read)

data FunBody = FunBodyA ProgStmts Expr | FunBodyB ProgStmts Expr
  deriving (Eq, Ord, Show, Read)

data ProgStmts = PSList ProgStmt ProgStmts | PSEnd
  deriving (Eq, Ord, Show, Read)

data ProgStmt
    = PIf Expr ProgStmt ProgStmt
    | PWhile Expr ProgStmt
    | PRead Location
    | PLocation Location Expr
    | PPrint Expr
    | PBlock Block
    | PExpr Expr CaseList
  deriving (Eq, Ord, Show, Read)

data Location = Location Ident [ArrayDimension]
  deriving (Eq, Ord, Show, Read)

data CaseList = Cases Case MoreCase
  deriving (Eq, Ord, Show, Read)

data MoreCase = MCList Case MoreCase | MCEnd
  deriving (Eq, Ord, Show, Read)

data Case = Case CID VarList ProgStmt
  deriving (Eq, Ord, Show, Read)

data VarList = VLList VarList | VLEnd | VarList Ident MoreVarList
  deriving (Eq, Ord, Show, Read)

data MoreVarList = MVLList Ident MoreVarList | MVLEnd
  deriving (Eq, Ord, Show, Read)

data Expr = BOr Expr BintTerm | BTerm BintTerm
  deriving (Eq, Ord, Show, Read)

data BintTerm = BAnd BintTerm BintFactor | BFactor BintFactor
  deriving (Eq, Ord, Show, Read)

data BintFactor
    = BNot BintFactor
    | BCompare IntExpr CompareOp IntExpr
    | BExpr IntExpr
  deriving (Eq, Ord, Show, Read)

data CompareOp = CompEQ | CompLT | CompGT | CompLEQ | CompGEQ
  deriving (Eq, Ord, Show, Read)

data IntExpr = IntAdd IntExpr Addop IntTerm | IntTerm IntTerm
  deriving (Eq, Ord, Show, Read)

data Addop = Add | Sub
  deriving (Eq, Ord, Show, Read)

data IntTerm = IntMul IntTerm Mulop IntFactor | IntFactor IntFactor
  deriving (Eq, Ord, Show, Read)

data Mulop = Mult | Divide
  deriving (Eq, Ord, Show, Read)

data IntFactor
    = Expression Expr
    | ListSize Ident [BasicArrayDimension]
    | ToFloat Expr
    | FunFloor Expr
    | FunCeil Expr
    | IDModList Ident ModifierList
    | IData CID ConsArgumentList
    | Integer Integer
    | Real Double
    | Boolean BVAL
    | Character Char
    | Negate IntFactor
  deriving (Eq, Ord, Show, Read)

data ModifierList
    = FunctionCall FunArgumentList | ArrayAccess [ArrayDimension]
  deriving (Eq, Ord, Show, Read)

data FunArgumentList = Args Arguments
  deriving (Eq, Ord, Show, Read)

data ConsArgumentList
    = DataArguments FunArgumentList | DataArgumentsss
  deriving (Eq, Ord, Show, Read)

data Arguments = AList Expr MoreArguments | AEnd
  deriving (Eq, Ord, Show, Read)

data MoreArguments = MAList Expr MoreArguments | MAEnd
  deriving (Eq, Ord, Show, Read)

