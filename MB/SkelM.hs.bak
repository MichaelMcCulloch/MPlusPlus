module SkelM where

-- Haskell module generated by the BNF converter

import AbsM
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transCID :: CID -> Result
transCID x = case x of
  CID string -> failure x
transBVAL :: BVAL -> Result
transBVAL x = case x of
  BVAL string -> failure x
transProg :: Prog -> Result
transProg x = case x of
  P block -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  Prog declarations programbody -> failure x
transDeclaration :: Declaration -> Result
transDeclaration x = case x of
  VarDef vardeclaration -> failure x
  FunDef fundeclaration -> failure x
  DataDef datadeclaration -> failure x
transVarDeclaration :: VarDeclaration -> Result
transVarDeclaration x = case x of
  VarDeclaration varspecs type_ -> failure x
transVarSpec :: VarSpec -> Result
transVarSpec x = case x of
  VarSpec ident arraydimensions -> failure x
transArrayDimension :: ArrayDimension -> Result
transArrayDimension x = case x of
  ArrDim expr -> failure x
transType :: Type -> Result
transType x = case x of
  Tint -> failure x
  Treal -> failure x
  Tbool -> failure x
  Tchar -> failure x
  Tuser ident -> failure x
transFunDeclaration :: FunDeclaration -> Result
transFunDeclaration x = case x of
  FunctionDec ident paramlist type_ funblock -> failure x
transFunBlock :: FunBlock -> Result
transFunBlock x = case x of
  FunctionBlock declarations funbody -> failure x
transParamList :: ParamList -> Result
transParamList x = case x of
  ParameterList basicdeclarations -> failure x
transBasicDeclaration :: BasicDeclaration -> Result
transBasicDeclaration x = case x of
  BasicDeclaration ident basicarraydimensions type_ -> failure x
transBasicArrayDimension :: BasicArrayDimension -> Result
transBasicArrayDimension x = case x of
  BArrDim -> failure x
transDataDeclaration :: DataDeclaration -> Result
transDataDeclaration x = case x of
  DataDeclaration ident consdeclarations -> failure x
transConsDeclarations :: ConsDeclarations -> Result
transConsDeclarations x = case x of
  ConsDeclarations consdecl moreconsdecl -> failure x
transMoreConsDecl :: MoreConsDecl -> Result
transMoreConsDecl x = case x of
  MCDList consdecl moreconsdecl -> failure x
  MCDEnd -> failure x
transConsDecl :: ConsDecl -> Result
transConsDecl x = case x of
  CTypeList cid typelist -> failure x
  CSimple cid -> failure x
transTypeList :: TypeList -> Result
transTypeList x = case x of
  TList type_ moretype -> failure x
transMoreType :: MoreType -> Result
transMoreType x = case x of
  MTList type_ moretype -> failure x
  MTEnd -> failure x
transProgramBody :: ProgramBody -> Result
transProgramBody x = case x of
  ProgBodyA progstmts -> failure x
  ProgBodyB progstmts -> failure x
transFunBody :: FunBody -> Result
transFunBody x = case x of
  FunBodyA progstmts expr -> failure x
  FunBodyB progstmts expr -> failure x
transProgStmts :: ProgStmts -> Result
transProgStmts x = case x of
  PSList progstmt progstmts -> failure x
  PSEnd -> failure x
transProgStmt :: ProgStmt -> Result
transProgStmt x = case x of
  PIf expr progstmt1 progstmt2 -> failure x
  PWhile expr progstmt -> failure x
  PRead location -> failure x
  PLocation location expr -> failure x
  PPrint expr -> failure x
  PBlock block -> failure x
  PExpr expr caselist -> failure x
transLocation :: Location -> Result
transLocation x = case x of
  Location ident arraydimensions -> failure x
transCaseList :: CaseList -> Result
transCaseList x = case x of
  Cases case_ morecase -> failure x
transMoreCase :: MoreCase -> Result
transMoreCase x = case x of
  MCList case_ morecase -> failure x
  MCEnd -> failure x
transCase :: Case -> Result
transCase x = case x of
  Case cid varlist progstmt -> failure x
transVarList :: VarList -> Result
transVarList x = case x of
  VLList varlist -> failure x
  VLEnd -> failure x
  VarList ident morevarlist -> failure x
transMoreVarList :: MoreVarList -> Result
transMoreVarList x = case x of
  MVLList ident morevarlist -> failure x
  MVLEnd -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  BOr expr bintterm -> failure x
  BTerm bintterm -> failure x
transBintTerm :: BintTerm -> Result
transBintTerm x = case x of
  BAnd bintterm bintfactor -> failure x
  BFactor bintfactor -> failure x
transBintFactor :: BintFactor -> Result
transBintFactor x = case x of
  BNot bintfactor -> failure x
  BCompare intexpr1 compareop intexpr2 -> failure x
  BExpr intexpr -> failure x
transCompareOp :: CompareOp -> Result
transCompareOp x = case x of
  CompEQ -> failure x
  CompLT -> failure x
  CompGT -> failure x
  CompLEQ -> failure x
  CompGEQ -> failure x
transIntExpr :: IntExpr -> Result
transIntExpr x = case x of
  IntAdd intexpr addop intterm -> failure x
  IntTerm intterm -> failure x
transAddop :: Addop -> Result
transAddop x = case x of
  Add -> failure x
  Sub -> failure x
transIntTerm :: IntTerm -> Result
transIntTerm x = case x of
  IntMul intterm mulop intfactor -> failure x
  IntFactor intfactor -> failure x
transMulop :: Mulop -> Result
transMulop x = case x of
  Mult -> failure x
  Divide -> failure x
transIntFactor :: IntFactor -> Result
transIntFactor x = case x of
  Expression expr -> failure x
  ListSize ident basicarraydimensions -> failure x
  ToFloat expr -> failure x
  FunFloor expr -> failure x
  FunCeil expr -> failure x
  IDModList ident modifierlist -> failure x
  IData cid consargumentlist -> failure x
  Integer integer -> failure x
  Real double -> failure x
  Boolean bval -> failure x
  Character char -> failure x
  Negate intfactor -> failure x
transModifierList :: ModifierList -> Result
transModifierList x = case x of
  FunctionCall funargumentlist -> failure x
  ArrayAccess arraydimensions -> failure x
transFunArgumentList :: FunArgumentList -> Result
transFunArgumentList x = case x of
  Args arguments -> failure x
transConsArgumentList :: ConsArgumentList -> Result
transConsArgumentList x = case x of
  DataArguments funargumentlist -> failure x
  DataArgumentsss -> failure x
transArguments :: Arguments -> Result
transArguments x = case x of
  AList expr morearguments -> failure x
  AEnd -> failure x
transMoreArguments :: MoreArguments -> Result
transMoreArguments x = case x of
  MAList expr morearguments -> failure x
  MAEnd -> failure x

